+ (1 | participant) + (1 | question_no), # Random
data = df, family = binomial,
optimizer = "optimx.L-BFGS-B"
control = glmerControl(
flat_model_v1 <- glmer(human_correctness ~ ai_usage + ai_correctness + seniority # Fixed
+ (1 | participant) + (1 | question_no), # Random
data = df, family = binomial,
control = glmerControl(
optimizer = "optimx.L-BFGS-B", optCtrl = list(maxfun = 1e6))
)
flat_model_v1 <- glmer(human_correctness ~ ai_usage + ai_correctness + seniority # Fixed
+ (1 | participant) + (1 | question_no), # Random
data = df, family = binomial,
control = glmerControl(
optimizer = "optimx",
optCtrl = list(maxfun = 1e6, algorithm = "L-BFGS-B")
)
)
install.packages("optimx")
library(optimx)
library(optimx)
flat_model_v1 <- glmer(human_correctness ~ ai_usage + ai_correctness + seniority # Fixed
+ (1 | participant) + (1 | question_no), # Random
data = df, family = binomial,
control = glmerControl(
optimizer = "optimx",
optCtrl = list(maxfun = 1e6, algorithm = "L-BFGS-B")
)
)
flat_model_v1 <- glmer(human_correctness ~ ai_usage + ai_correctness + seniority # Fixed
+ (1 | participant) + (1 | question_no), # Random
data = df, family = binomial,
control = glmerControl(
optimizer = "optimx",
optCtrl = list(maxfun = 1e6, method = "L-BFGS-B")
)
)
summary(flat_model_v1)
flat_model_v1 <- glmer(human_correctness ~ ai_usage + ai_correctness + seniority # Fixed
+ (1 | participant) + (1 | question_no), # Random
data = df, family = binomial,
control = glmerControl(
optimizer = "optimx",
optCtrl = list(method = "L-BFGS-B")
)
)
summary(flat_model_v1)
report(flat_model_v1)
tab_model(flat_model_v1, p.style = "scientific" , show.aic = T)
flat_model_v1 <- glmer(human_correctness ~ ai_usage + ai_correctness + seniority # Fixed
# + (1 | participant)
+ (1 | question_no), # Random
data = df, family = binomial,
control = glmerControl(
optimizer = "optimx",
optCtrl = list(method = "L-BFGS-B")
)
)
summary(flat_model_v1)
tab_model(flat_model_v1, p.style = "scientific" , show.aic = T)
flat_model_v1 <- glmer(human_correctness ~ ai_usage + ai_correctness + seniority # Fixed
+ (1 | participant)
+ (1 | question_no), # Random
data = df, family = binomial,
control = glmerControl(
optimizer = "optimx",
optCtrl = list(method = "L-BFGS-B")
)
)
summary(flat_model_v1)
report(flat_model_v1)
tab_model(flat_model_v1, p.style = "scientific" , show.aic = T)
flat_model_v1 <- glmer(human_correctness ~ ai_usage * ai_correctness + seniority # Fixed
+ (1 | participant)
+ (1 | question_no), # Random
data = df, family = binomial,
control = glmerControl(
optimizer = "optimx",
optCtrl = list(method = "L-BFGS-B")
)
)
summary(flat_model_v1)
tab_model(flat_model_v1, p.style = "scientific" , show.aic = T)
flat_model_v1 <- glmer(human_correctness ~ ai_usage + seniority # Fixed
+ (1 | participant)
+ (1 | question_no), # Random
data = df, family = binomial,
control = glmerControl(
optimizer = "optimx",
optCtrl = list(method = "L-BFGS-B")
)
)
summary(flat_model_v1)
best_model <- glmer(human_correctness ~ ai_usage * ai_correctness + seniority # Fixed
+ (1 | participant) + (1 | question_no), # Random
data = df, family = binomial,
control = glmerControl(
optimizer = "optimx",
optCtrl = list(method = "L-BFGS-B")
)
)
summary(best_model)
report(best_model)
tab_model(best_model, p.style = "scientific" , show.aic = T)
plot_model(flat_model_v1, type = "re", show.values = TRUE)
flat_model_v2 <- glmer(human_correctness ~ ai_usage + seniority # Fixed
+ (1 | participant) + (1 | question_no), # Random
data = df, family = binomial,
control = glmerControl(
optimizer = "optimx",
optCtrl = list(method = "L-BFGS-B")
)
)
summary(flat_model_v2)
report(flat_model_v2)
report(flat_model_v2)
tab_model(flat_model_v2, p.style = "scientific" , show.aic = T)
best_model <- glmer(human_correctness ~ ai_usage * ai_correctness + seniority # Fixed
+ (1 | participant) + (1 | question_no), # Random
data = df, family = binomial,
control = glmerControl(
optimizer = "optimx",
optCtrl = list(method = "L-BFGS-B")
)
)
summary(best_model)
anova(best_model, flat_model_v1, flat_model_v2)
flat_model_v1 <- glmer(human_correctness ~ ai_usage + ai_correctness + seniority # Fixed
+ (1 | participant) + (1 | question_no), # Random
data = df, family = binomial,
control = glmerControl(
optimizer = "optimx",
optCtrl = list(method = "L-BFGS-B")
)
)
summary(flat_model_v1)
flat_model_v2 <- glmer(human_correctness ~ ai_usage + seniority # Fixed
+ (1 | participant) + (1 | question_no), # Random
data = df, family = binomial,
control = glmerControl(
optimizer = "optimx",
optCtrl = list(method = "L-BFGS-B")
)
)
summary(flat_model_v2)
anova(best_model, flat_model_v1, flat_model_v2)
expert_df <- df %>% filter(df$seniority="expert")
expert_df <- df %>% filter(df$seniority=="expert")
expert_df <- df %>% filter(df$seniority=="expert")
expert_df
expert_df <- df %>% filter(df$seniority=="EXPERT")
expert_df
df
expert_df <- df %>% filter(df$seniority=="Expert")
expert_df
expert_model_v1 <- glmer(human_correctness ~ ai_usage # Fixed
+ (1 | participant) + (1 | question_no), # Random
data = expert_df, family = binomial,
control = glmerControl(
optimizer = "optimx",
optCtrl = list(method = "L-BFGS-B")
)
)
summary(flat_model_v2)
expert_model_v1 <- glmer(human_correctness ~ ai_usage # Fixed
+ (1 | participant) + (1 | question_no), # Random
data = expert_df, family = binomial,
control = glmerControl(
optimizer = "optimx",
optCtrl = list(method = "L-BFGS-B")
)
)
summary(flat_model_v2)
expert_model_v1 <- glmer(human_correctness ~ ai_usage # Fixed
+ (1 | participant) + (1 | question_no), # Random
data = expert_df, family = binomial,
control = glmerControl(
optimizer = "optimx",
optCtrl = list(method = "L-BFGS-B")
)
)
summary(expert_model_v1)
isSingular(expert_model_v1)
expert_model_v1 <- glmer(human_correctness ~ ai_usage # Fixed
+ (1 | participant) + (1 | question_no), # Random
data = expert_df, family = binomial,
control = glmerControl(
optimizer = "optimx",
optCtrl = list(method = "L-BFGS-B")
)
)
summary(expert_model_v1)
expert_model_v1 <- glmer(human_correctness ~ ai_usage # Fixed
# + (1 | participant)
+ (1 | question_no), # Random
data = expert_df, family = binomial,
control = glmerControl(
optimizer = "optimx",
optCtrl = list(method = "L-BFGS-B")
)
)
summary(expert_model_v1)
isSingular(expert_model_v1)
report(expert_model_v1)
tab_model(expert_model_v1, p.style = "scientific" , show.aic = T)
expert_model_v2 <- glmer(human_correctness ~ ai_usage + ai_correctness # Fixed
+ (1 | question_no), # Random
data = expert_df, family = binomial,
control = glmerControl(
optimizer = "optimx",
optCtrl = list(method = "L-BFGS-B")
)
)
summary(expert_model_v2)
expert_model_v2 <- glmer(human_correctness ~ ai_usage + ai_correctness # Fixed
+ (1 | question_no), # Random
data = expert_df, family = binomial,
control = glmerControl(
optimizer = "optimx",
optCtrl = list(method = "L-BFGS-B")
)
)
summary(expert_model_v2)
report(expert_model_v2)
tab_model(expert_model_v1, p.style = "scientific" , show.aic = T)
tab_model(expert_model_v2, p.style = "scientific" , show.aic = T)
expert_model_v3 <- glmer(human_correctness ~ ai_usage * ai_correctness # Fixed
+ (1 | question_no), # Random
data = expert_df, family = binomial,
control = glmerControl(
optimizer = "optimx",
optCtrl = list(method = "L-BFGS-B")
)
)
summary(expert_model_v3)
report(expert_model_v3)
tab_model(expert_model_v3, p.style = "scientific" , show.aic = T)
tab_model(expert_model_v3, p.style = "scientific" , show.aic = T)
expert_model_v3 <- glmer(human_correctness ~ ai_usage * ai_correctness # Fixed
+ (1 | question_no), # Random
data = expert_df, family = binomial,
control = glmerControl(
optimizer = "optimx",
optCtrl = list(method = "L-BFGS-B")
)
)
summary(expert_model_v3)
tab_model(expert_model_v2, p.style = "scientific" , show.aic = T)
tab_model(expert_model_v3, p.style = "scientific" , show.aic = T)
tab_model(expert_model_v1, p.style = "scientific" , show.aic = T)
tab_model(expert_model_v1, p.style = "scientific" , show.aic = T)
tab_model(expert_model_v2, p.style = "scientific" , show.aic = T)
tab_model(expert_model_v3, p.style = "scientific" , show.aic = T)
expert_df <- df %>% filter(df$seniority=="Expert")
novice_df <- df %>% filter(df$seniority=="Novice")
expert_df <- df %>% filter(df$seniority=="Expert")
novice_df <- df %>% filter(df$seniority=="Novice")
expert_df <- df %>% filter(df$seniority=="Expert")
novice_df <- df %>% filter(df$seniority=="Novice")
novice_df
df
expert_df <- df %>% filter(df$seniority=="Expert")
novice_df <- df %>% filter(df$seniority=="Novice")
correct_df <- df %>% filter(df$ai_correctness==1)
wrong_df <- df %>% filter(df$ai_correctness==0)
correct_df
novice_model_v1 <- glmer(human_correctness ~ ai_usage # Fixed
+ (1 | question_no), # Random
data = novice_df, family = binomial,
control = glmerControl(
optimizer = "optimx",
optCtrl = list(method = "L-BFGS-B")
)
)
summary(novice_model_v1)
report(novice_model_v1)
tab_model(novice_model_v1, p.style = "scientific" , show.aic = T)
novice_model_v2 <- glmer(human_correctness ~ ai_usage + ai_correctness # Fixed
+ (1 | question_no), # Random
data = novice_df, family = binomial,
control = glmerControl(
optimizer = "optimx",
optCtrl = list(method = "L-BFGS-B")
)
)
summary(novice_model_v2)
report(novice_model_v2)
tab_model(novice_model_v2, p.style = "scientific" , show.aic = T)
novice_model_v1 <- glmer(human_correctness ~ ai_usage # Fixed
+ (1 | question_no), # Random
data = novice_df, family = binomial,
control = glmerControl(
optimizer = "optimx",
optCtrl = list(method = "L-BFGS-B")
)
)
summary(novice_model_v1)
report(novice_model_v1)
tab_model(novice_model_v1, p.style = "scientific" , show.aic = T)
novice_model_v2 <- glmer(human_correctness ~ ai_usage + ai_correctness # Fixed
+ (1 | question_no), # Random
data = novice_df, family = binomial,
control = glmerControl(
optimizer = "optimx",
optCtrl = list(method = "L-BFGS-B")
)
)
summary(novice_model_v2)
report(novice_model_v2)
tab_model(novice_model_v2, p.style = "scientific" , show.aic = T)
novice_model_v3 <- glmer(human_correctness ~ ai_usage * ai_correctness # Fixed
+ (1 | question_no), # Random
data = novice_df, family = binomial,
control = glmerControl(
optimizer = "optimx",
optCtrl = list(method = "L-BFGS-B")
)
)
summary(novice_model_v3)
report(novice_model_v3)
tab_model(novice_model_v3, p.style = "scientific" , show.aic = T)
tab_model(novice_model_v3, p.style = "scientific" , show.aic = T)
novice_model_v3 <- glmer(human_correctness ~ ai_usage * ai_correctness # Fixed
+ (1 | question_no), # Random
data = novice_df, family = binomial,
control = glmerControl(
optimizer = "optimx",
optCtrl = list(method = "L-BFGS-B")
)
)
summary(novice_model_v3)
#report(novice_model_v3)
novice_df
tab_model(novice_model_v3, p.style = "scientific" , show.aic = T)
novice_model_v3 <- glmer(human_correctness ~ ai_usage * ai_correctness # Fixed
+ (1 | question_no), # Random
data = novice_df, family = binomial,
control = glmerControl(
optimizer = "optimx",
optCtrl = list(method = "L-BFGS-B")
)
)
summary(novice_model_v3)
novice_model_v3 <- glmer(human_correctness ~ ai_usage * ai_correctness # Fixed
+ (1 | question_no), # Random
data = novice_df, family = binomial,
control = glmerControl(optimizer = "BOBYQA")
)
novice_model_v3 <- glmer(human_correctness ~ ai_usage * ai_correctness # Fixed
+ (1 | question_no), # Random
data = novice_df, family = binomial,
control = glmerControl(optimizer = "bobyqa")
)
)
novice_model_v3 <- glmer(human_correctness ~ ai_usage * ai_correctness # Fixed
+ (1 | question_no), # Random
data = novice_df, family = binomial,
control = glmerControl(optimizer = "bobyqa")
)
summary(novice_model_v3)
report(novice_model_v3)
tab_model(novice_model_v3, p.style = "scientific" , show.aic = T)
anova(expert_model_v1, expert_model_v2, expert_model_v3)
anova(novice_model_v1, novice_model_v2, novice_model_v3)
correct_model_v1 <- glmer(human_correctness ~ ai_usage + seniority # Fixed
+ (1 | question_no), # Random
data = correct_df, family = binomial,
control = glmerControl(
optimizer = "optimx",
optCtrl = list(method = "L-BFGS-B")
)
)
summary(novice_model_v1)
correct_model_v1 <- glmer(human_correctness ~ ai_usage + seniority # Fixed
+ (1 | question_no), # Random
data = correct_df, family = binomial,
control = glmerControl(
optimizer = "optimx",
optCtrl = list(method = "L-BFGS-B")
)
)
summary(correct_model_v1)
report(correct_model_v1)
correct_model_v2 <- glmer(human_correctness ~ ai_usage # Fixed
+ (1 | question_no), # Random
data = correct_df, family = binomial,
control = glmerControl(
optimizer = "optimx",
optCtrl = list(method = "L-BFGS-B")
)
)
summary(correct_model_v2)
correct_model_v2 <- glmer(human_correctness ~ ai_usage # Fixed
+ (1 | question_no), # Random
data = correct_df, family = binomial,
control = glmerControl(
optimizer = "optimx",
optCtrl = list(method = "L-BFGS-B")
)
)
summary(correct_model_v2)
report(correct_model_v2)
tab_model(correct_model_v2, p.style = "scientific" , show.aic = T)
report(correct_model_v1)
anova(correct_model_v1, correct_model_v2)
correct_model_v1 <- glmer(human_correctness ~ ai_usage + seniority # Fixed
+ (1 | question_no), # Random
data = correct_df, family = binomial,
control = glmerControl(
optimizer = "optimx",
optCtrl = list(method = "L-BFGS-B")
)
)
summary(correct_model_v1)
tab_model(correct_model_v1, p.style = "scientific" , show.aic = T)
tab_model(correct_model_v1, p.style = "scientific" , show.aic = T)
correct_model_v2 <- glmer(human_correctness ~ ai_usage # Fixed
+ (1 | question_no), # Random
data = correct_df, family = binomial,
control = glmerControl(
optimizer = "optimx",
optCtrl = list(method = "L-BFGS-B")
)
)
summary(correct_model_v2)
report(correct_model_v2)
tab_model(correct_model_v2, p.style = "scientific" , show.aic = T)
anova(correct_model_v1, correct_model_v2)
anova(correct_model_v1, correct_model_v2)
wrong_model_v1 <- glmer(human_correctness ~ ai_usage + seniority # Fixed
+ (1 | question_no), # Random
data = wrong_df, family = binomial,
control = glmerControl(
optimizer = "optimx",
optCtrl = list(method = "L-BFGS-B")
)
)
summary(wrong_model_v1)
report(wrong_model_v1)
tab_model(wrong_model_v1, p.style = "scientific" , show.aic = T)
tab_model(wrong_model_v1, p.style = "scientific" , show.aic = T)
wrong_model_v2 <- glmer(human_correctness ~ ai_usage # Fixed
+ (1 | question_no), # Random
data = wrong_df, family = binomial,
control = glmerControl(
optimizer = "optimx",
optCtrl = list(method = "L-BFGS-B")
)
)
summary(wrong_model_v2)
wrong_model_v2 <- glmer(human_correctness ~ ai_usage # Fixed
+ (1 | question_no), # Random
data = wrong_df, family = binomial,
control = glmerControl(
optimizer = "optimx",
optCtrl = list(method = "L-BFGS-B")
)
)
summary(wrong_model_v2)
report(wrong_model_v2)
tab_model(wrong_model_v2, p.style = "scientific" , show.aic = T)
anova(wrong_model_v1, wrong_model_v2)
history
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse) # data wrangling and visualization
library(sjPlot) # to visualizing mixed-effects models
library(effects) # to visualizing mixed-effects models
library(psycho)
library(broom)
library(lme4) # "golden standard" for mixed-effects modelling in R (no p-values)
library(lmerTest) # p-values for MEMs based on the Satterthwaite approximation
library(report) # mainly for an "report" function
library(emmeans) # post-hoc analysis
library(knitr) # beautifying tables
library(sjstats) # ICC - intraclass-correlation coefficient
library(caret) # ML, model comparison & utility functions
library(Gmisc)
library(lattice)
library(optimx)
MAIN_DIR = getwd()
DATA_DIR = pathJoin(MAIN_DIR, "aihuman.csv")
df = read.csv(DATA_DIR)
df
best_model <- glmer(human_correctness ~ ai_usage * seniority # Fixed
+ (1 | participant) + (1 | question_no), # Random
data = df, family = binomial,
control = glmerControl(
optimizer = "optimx",
optCtrl = list(method = "L-BFGS-B")
)
)
summary(best_model)
best_model <- glmer(human_correctness ~ ai_usage + seniority # Fixed
+ (1 | participant) + (1 | question_no), # Random
data = df, family = binomial,
control = glmerControl(
optimizer = "optimx",
optCtrl = list(method = "L-BFGS-B")
)
)
summary(best_model)
final_model <- glmer(human_correctness ~ ai_usage + seniority # Fixed
+ (1 | participant) + (1 | question_no), # Random
data = df, family = binomial,
control = glmerControl(
optimizer = "optimx",
optCtrl = list(method = "L-BFGS-B")
)
)
summary(final_model)
report(final_model)
tab_model(final_model, p.style = "scientific" , show.aic = T)
